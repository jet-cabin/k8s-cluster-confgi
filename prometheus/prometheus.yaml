---

kind: ServiceAccount
apiVersion: v1
metadata: 
  name: prometheus
  namespace: k8s-mon

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata: 
  name: cluster-role-prometheus
  namespace: k8s-mon
rules: 
- apiGroups: 
  - ""
  resources: 
  - nodes
  - services
  - pods
  - endpoints
  - node/proxy
  verbs: 
  - get
  - list
  - watch
- apiGroups: 
  - ""
  resources: 
  - configmaps
  - nodes/metrics
  verbs:
  - get
- nonResourceURLs: 
  - /metrics
  verbs: 
  - get

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata: 
  name: crb-prometheus
  namespace: k8s-mon
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-role-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: k8s-mon

---

kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata: 
  name: local-storage
  namespace: k8s-mon
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---

apiVersion: v1
kind: PersistentVolume
metadata: 
  name: local-pv
  namespace: k8s-mon
spec: 
  capacity: 
    storage: 1Gi
  accessModes: 
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local: 
    path: /data
  nodeAffinity: 
    required: 
      nodeSelectorTerms: 
      - matchExpressions: 
        - key: kubernetes.io/hostname
          operator: In
          values: 
          - node3
---

kind: PersistentVolumeClaim
apiVersion: v1
metadata: 
  name: local-pvc
  namespace: k8s-mon
spec: 
  accessModes: 
  - ReadWriteOnce
  storageClassName: local-storage
  resources: 
    requests: 
      storage: 1Gi
---
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: prom-config
#  namespace: k8s-mon
#data:
#  prometheus.yml: |
#    global:
#      scrape_interval:     15s
#      evaluation_interval: 15s
#    scrape_configs:
#
#    - job_name: 'kubernetes-apiservers'
#      kubernetes_sd_configs:
#      - role: endpoints
#      scheme: https
#      tls_config:
#        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#      relabel_configs:
#      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
#        action: keep
#        regex: default;kubernetes;https
#
#    - job_name: 'kubernetes-nodes'
#      kubernetes_sd_configs:
#      - role: node
#      scheme: https
#      tls_config:
#        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#      relabel_configs:
#      - action: labelmap
#        regex: __meta_kubernetes_node_label_(.+)
#      - target_label: __address__
#        replacement: kubernetes.default.svc:443
#      - source_labels: [__meta_kubernetes_node_name]
#        regex: (.+)
#        target_label: __metrics_path__
#        replacement: /api/v1/nodes/${1}/proxy/metrics
#
#    - job_name: 'kubernetes-cadvisor'
#      kubernetes_sd_configs:
#      - role: node
#      scheme: https
#      tls_config:
#        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#      relabel_configs:
#      - action: labelmap
#        regex: __meta_kubernetes_node_label_(.+)
#      - target_label: __address__
#        replacement: kubernetes.default.svc:443
#      - source_labels: [__meta_kubernetes_node_name]
#        regex: (.+)
#        target_label: __metrics_path__
#        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
#
#    - job_name: 'kubernetes-service-endpoints'
#      kubernetes_sd_configs:
#      - role: endpoints
#      relabel_configs:
#      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
#        action: keep
#        regex: true
#      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
#        action: replace
#        target_label: __scheme__
#        regex: (https?)
#      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
#        action: replace
#        target_label: __metrics_path__
#        regex: (.+)
#      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
#        action: replace
#        target_label: __address__
#        regex: ([^:]+)(?::\d+)?;(\d+)
#        replacement: $1:$2
#      - action: labelmap
#        regex: __meta_kubernetes_service_label_(.+)
#      - source_labels: [__meta_kubernetes_namespace]
#        action: replace
#        target_label: kubernetes_namespace
#      - source_labels: [__meta_kubernetes_service_name]
#        action: replace
#        target_label: kubernetes_name
#
#    - job_name: 'kubernetes-services'
#      kubernetes_sd_configs:
#      - role: service
#      metrics_path: /probe
#      params:
#        module: [http_2xx]
#      relabel_configs:
#      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
#        action: keep
#        regex: true
#      - source_labels: [__address__]
#        target_label: __param_target
#      - target_label: __address__
#        replacement: blackbox-exporter.example.com:9115
#      - source_labels: [__param_target]
#        target_label: instance
#      - action: labelmap
#        regex: __meta_kubernetes_service_label_(.+)
#      - source_labels: [__meta_kubernetes_namespace]
#        target_label: kubernetes_namespace
#      - source_labels: [__meta_kubernetes_service_name]
#        target_label: kubernetes_name
#
#    - job_name: 'kubernetes-ingresses'
#      kubernetes_sd_configs:
#      - role: ingress
#      relabel_configs:
#      - source_labels: [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
#        action: keep
#        regex: true
#      - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
#        regex: (.+);(.+);(.+)
#        replacement: ${1}://${2}${3}
#        target_label: __param_target
#      - target_label: __address__
#        replacement: blackbox-exporter.example.com:9115
#      - source_labels: [__param_target]
#        target_label: instance
#      - action: labelmap
#        regex: __meta_kubernetes_ingress_label_(.+)
#      - source_labels: [__meta_kubernetes_namespace]
#        target_label: kubernetes_namespace
#      - source_labels: [__meta_kubernetes_ingress_name]
#        target_label: kubernetes_name
#
#    - job_name: 'kubernetes-pods'
#      kubernetes_sd_configs:
#      - role: pod
#      relabel_configs:
#      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
#        action: keep
#        regex: true
#      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
#        action: replace
#        target_label: __metrics_path__
#        regex: (.+)
#      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
#        action: replace
#        regex: ([^:]+)(?::\d+)?;(\d+)
#        replacement: $1:$2
#        target_label: __address__
#      - action: labelmap
#        regex: __meta_kubernetes_pod_label_(.+)
#      - source_labels: [__meta_kubernetes_namespace]
#        action: replace
#        target_label: kubernetes_namespace
#      - source_labels: [__meta_kubernetes_pod_name]
#        action: replace
#        target_label: kubernetes_pod_name
#kind: ConfigMap
#apiVersion: v1
#metadata: 
#  name: prom-config
#  namespace: k8s-mon
#data: 
#  prometheus.yml: |
#    global:
#      scrape_interval: 15s
#      scrape_timeout: 15s
#    scrape_configs:
#    - job_name: 'prometheus'
#      static_configs:
#      - targets: ['localhost:9090']
#    - job_name: 'kubernetes-nodes'
#      kubernetes_sd_configs:
#      - role: node
#      scheme: https
#      tls_config:
#        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
#      relabel_configs:
#      - action: labelmap
#        regex: __meta_kubernetes_node_label_(.+)
#      - target_label: __address__
#        regex: '(.*):10250'
#        replacement: ${1}:9100
#      - source_labels: [__meta_kubernetes_node_name]
#        regex: (.+)
#        target_label: __metrics_path__
#        replacement: /api/v1/nodes/${1}/proxy/metrics
#    - job_name: 'kubernetes-nodes'
#      kubernetes_sd_configs:
#      - role: node
#      relabel_configs:
#      - source_labels: [__address__]
#        regex: '(.*):10250'
#        replacement: '${1}:9100'
#        target_label: __address__
#        action: replace
#      - action: labelmap
#        regex: __meta_kubernetes_node_label_(.+)
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: k8s-mon
  labels:
    app: prometheus
spec:
  selector: 
    matchLabels: 
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - image: prom/prometheus:v2.8.0
        name: prometheus
        imagePullPolicy: IfNotPresent
        args:
        - "--config.file=/etc/prometheus/prometheus.yml"
        - "--storage.tsdb.path=/prometheus"
        - "--storage.tsdb.retention=1d"
        - "--web.enable-admin-api"
        - "--web.enable-lifecycle"
        ports:
        - containerPort: 9090
          name: http
        volumeMounts:
        - mountPath: "/prometheus"
          subPath: prometheus
          name: data
        - mountPath: "/etc/prometheus"
          name: config
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 500m
            memory: 1Gi
      securityContext:
        runAsUser: 0
      tolerations: 
      - key: "fun"
        operator: "Equal"
        value: "monitor"
        effect: "NoSchedule"
      serviceAccountName: prometheus
      volumes:
      - name: config
        configMap:
          name: prom-config
      - name: data
        persistentVolumeClaim:
          claimName: local-pvc
---

kind: Service
apiVersion: v1
metadata: 
  name: svc-prometheus
  namespace: k8s-mon
spec: 
  selector: 
    app: prometheus
  type: NodePort
  ports: 
    - name: web-prometheus
      #protocol: TCP
      port: 9090
      targetPort: 9090
      nodePort: 32222 
   
